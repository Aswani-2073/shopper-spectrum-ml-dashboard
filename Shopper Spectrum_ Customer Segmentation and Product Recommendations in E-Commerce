{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[{"file_id":"1J_Exy9jSmAwdiAiBLfV7F2zSbkaUuWAk","timestamp":1753675712796}],"collapsed_sections":["vncDsAP0Gaoa","FJNUwmbgGyua","w6K7xa23Elo4","yQaldy8SH6Dl","mDgbUHAGgjLW","O_i_v8NEhb9l","HhfV-JJviCcP","Y3lxredqlCYt","3RnN4peoiCZX","x71ZqKXriCWQ","7hBIi_osiCS2","JlHwYmJAmNHm","35m5QtbWiB9F","PoPl-ycgm1ru","H0kj-8xxnORC","nA9Y7ga8ng1Z","PBTbrJXOngz2","u3PMJOP6ngxN","dauF4eBmngu3","bKJF3rekwFvQ","MSa1f5Uengrz","GF8Ens_Soomf","0wOQAZs5pc--","K5QZ13OEpz2H","lQ7QKXXCp7Bj","448CDAPjqfQr","KSlN3yHqYklG","t6dVpIINYklI","ijmpgYnKYklI","-JiQyfWJYklI","EM7whBJCYoAo","fge-S5ZAYoAp","85gYPyotYoAp","RoGjAbkUYoAp","4Of9eVA-YrdM","iky9q4vBYrdO","F6T5p64dYrdO","y-Ehk30pYrdP","bamQiAODYuh1","QHF8YVU7Yuh3","GwzvFGzlYuh3","qYpmQ266Yuh3","OH-pJp9IphqM","bbFf2-_FphqN","_ouA3fa0phqN","Seke61FWphqN","PIIx-8_IphqN","t27r6nlMphqO","r2jJGEOYphqO","b0JNsNcRphqO","BZR9WyysphqO","jj7wYXLtphqO","eZrbJ2SmphqO","rFu4xreNphqO","YJ55k-q6phqO","gCFgpxoyphqP","OVtJsKN_phqQ","lssrdh5qphqQ","U2RJ9gkRphqQ","1M8mcRywphqQ","tgIPom80phqQ","JMzcOPDDphqR","x-EpHcCOp1ci","X_VqEhTip1ck","8zGJKyg5p1ck","PVzmfK_Ep1ck","n3dbpmDWp1ck","ylSl6qgtp1ck","ZWILFDl5p1ck","M7G43BXep1ck","Ag9LCva-p1cl","E6MkPsBcp1cl","2cELzS2fp1cl","3MPXvC8up1cl","NC_X3p0fY2L0","UV0SzAkaZNRQ","YPEH6qLeZNRQ","q29F0dvdveiT","EXh0U9oCveiU","22aHeOlLveiV","g-ATYxFrGrvw","Yfr_Vlr8HBkt","8yEUt7NnHlrM","tEA2Xm5dHt1r","I79__PHVH19G","Ou-I18pAyIpj","fF3858GYyt-u","4_0_7-oCpUZd","hwyV_J3ipUZe","3yB-zSqbpUZe","dEUvejAfpUZe","Fd15vwWVpUZf","bn_IUdTipZyH","49K5P_iCpZyH","Nff-vKELpZyI","kLW572S8pZyI","dWbDXHzopZyI","yLjJCtPM0KBk","xiyOF9F70UgQ","7wuGOrhz0itI","id1riN9m0vUs","578E2V7j08f6","89xtkJwZ18nB","67NQN5KX2AMe","Iwf50b-R2tYG","GMQiZwjn3iu7","WVIkgGqN3qsr","XkPnILGE3zoT","Hlsf0x5436Go","mT9DMSJo4nBL","c49ITxTc407N","OeJFEK0N496M","9ExmJH0g5HBk","cJNqERVU536h","k5UmGsbsOxih","T0VqWOYE6DLQ","qBMux9mC6MCf","-oLEiFgy-5Pf","C74aWNz2AliB","2DejudWSA-a0","pEMng2IbBLp7","rAdphbQ9Bhjc","TNVZ9zx19K6k","nqoHp30x9hH9","rMDnDkt2B6du","yiiVWRdJDDil","1UUpS68QDMuG","kexQrXU-DjzY","T5CmagL3EC8N","BhH2vgX9EjGr","qjKvONjwE8ra","P1XJ9OREExlT","VFOzZv6IFROw","TIqpNgepFxVj","VfCC591jGiD4","OB4l2ZhMeS1U","ArJBuiUVfxKd","4qY1EAkEfxKe","PiV4Ypx8fxKe","TfvqoZmBfxKf","dJ2tPlVmpsJ0","JWYfwnehpsJ1","-jK_YjpMpsJ2","HAih1iBOpsJ2","zVGeBEFhpsJ2","bmKjuQ-FpsJ3","Fze-IPXLpx6K","7AN1z2sKpx6M","9PIHJqyupx6M","_-qAgymDpx6N","Z-hykwinpx6N","h_CCil-SKHpo","cBFFvTBNJzUa","HvGl1hHyA_VK","EyNgTHvd2WFk","KH5McJBi2d8v","iW_Lq9qf2h6X","-Kee-DAl2viO","gCX9965dhzqZ","gIfDvo9L0UH2"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Project Name**    -\n","\n"],"metadata":{"id":"vncDsAP0Gaoa"}},{"cell_type":"markdown","source":["##### **Project Type**    - Unsupervised Machine Learning ‚Äì Clustering / Collaborative Filtering ‚Äì Recommendation System\n","##### **Contribution**    - Individual\n"],"metadata":{"id":"beRrZCGUAJYm"}},{"cell_type":"markdown","source":["# **Project Summary -**"],"metadata":{"id":"FJNUwmbgGyua"}},{"cell_type":"markdown","source":["The ‚ÄúShopper Spectrum‚Äù project focuses on analyzing e-commerce transaction data to uncover valuable insights into customer purchasing behavior. Using Recency, Frequency, and Monetary (RFM) analysis, we segment customers into meaningful groups such as High-Value, Regular, Occasional, and At-Risk. This segmentation enables businesses to tailor marketing strategies and improve customer engagement. In addition, the project leverages collaborative filtering techniques to build a product recommendation system that suggests similar products based on customer purchase history. The entire pipeline‚Äîfrom data cleaning, feature engineering, and exploratory data analysis to clustering and recommendation modeling‚Äîis implemented in Python. A user-friendly Streamlit web application allows real-time product recommendations and customer segment predictions based on input behavior. This end-to-end solution demonstrates the power of machine learning in enhancing customer experience, driving sales, and enabling data-driven decision-making in the retail e-commerce domain.\n","\n"],"metadata":{"id":"F6v_1wHtG2nS"}},{"cell_type":"markdown","source":["# **GitHub Link -**"],"metadata":{"id":"w6K7xa23Elo4"}},{"cell_type":"markdown","source":["Provide your GitHub Link here."],"metadata":{"id":"h1o69JH3Eqqn"}},{"cell_type":"code","source":[],"metadata":{"id":"4vu9oxYOPaGg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Problem Statement**\n"],"metadata":{"id":"yQaldy8SH6Dl"}},{"cell_type":"markdown","source":["The global e-commerce industry generates vast amounts of transaction data daily, offering valuable insights into customer purchasing behaviors. Analyzing this data is essential for identifying meaningful customer segments and recommending relevant products to enhance customer experience and drive business growth. This project aims to examine transaction data from an online retail business to uncover patterns in customer purchase behavior, segment customers based on Recency, Frequency, and Monetary (RFM) analysis, and develop a product recommendation system using collaborative filtering techniques."],"metadata":{"id":"DpeJGUA3kjGy"}},{"cell_type":"markdown","source":["# **General Guidelines** : -  "],"metadata":{"id":"mDgbUHAGgjLW"}},{"cell_type":"markdown","source":["1.   Well-structured, formatted, and commented code is required.\n","2.   Exception Handling, Production Grade Code & Deployment Ready Code will be a plus. Those students will be awarded some additional credits.\n","     \n","     The additional credits will have advantages over other students during Star Student selection.\n","       \n","             [ Note: - Deployment Ready Code is defined as, the whole .ipynb notebook should be executable in one go\n","                       without a single error logged. ]\n","\n","3.   Each and every logic should have proper comments.\n","4. You may add as many number of charts you want. Make Sure for each and every chart the following format should be answered.\n","        \n","\n","```\n","# Chart visualization code\n","```\n","            \n","\n","*   Why did you pick the specific chart?\n","*   What is/are the insight(s) found from the chart?\n","* Will the gained insights help creating a positive business impact?\n","Are there any insights that lead to negative growth? Justify with specific reason.\n","\n","5. You have to create at least 15 logical & meaningful charts having important insights.\n","\n","\n","[ Hints : - Do the Vizualization in  a structured way while following \"UBM\" Rule.\n","\n","U - Univariate Analysis,\n","\n","B - Bivariate Analysis (Numerical - Categorical, Numerical - Numerical, Categorical - Categorical)\n","\n","M - Multivariate Analysis\n"," ]\n","\n","\n","\n","\n","\n","6. You may add more ml algorithms for model creation. Make sure for each and every algorithm, the following format should be answered.\n","\n","\n","*   Explain the ML Model used and it's performance using Evaluation metric Score Chart.\n","\n","\n","*   Cross- Validation & Hyperparameter Tuning\n","\n","*   Have you seen any improvement? Note down the improvement with updates Evaluation metric Score Chart.\n","\n","*   Explain each evaluation metric's indication towards business and the business impact pf the ML model used.\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"ZrxVaUj-hHfC"}},{"cell_type":"markdown","source":["# ***Let's Begin !***"],"metadata":{"id":"O_i_v8NEhb9l"}},{"cell_type":"markdown","source":["## ***1. Know Your Data***"],"metadata":{"id":"HhfV-JJviCcP"}},{"cell_type":"markdown","source":["### Import Libraries"],"metadata":{"id":"Y3lxredqlCYt"}},{"cell_type":"code","source":["# ‚úÖ Import Libraries\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from datetime import datetime\n","\n","# üìå For clustering and recommendation later\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import silhouette_score\n","from sklearn.metrics.pairwise import cosine_similarity"],"metadata":{"id":"M8Vqi-pPk-HR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Dataset Loading"],"metadata":{"id":"3RnN4peoiCZX"}},{"cell_type":"code","source":["sns.set(style=\"whitegrid\")\n","plt.rcParams[\"figure.figsize\"] = (10, 6)\n","\n","# ‚úÖ Upload Dataset (Run this cell and select your CSV file)\n","from google.colab import files\n","uploaded = files.upload()\n","\n","# üìÑ Load CSV file into DataFrame\n","import io\n","df = pd.read_csv(io.BytesIO(next(iter(uploaded.values()))))\n"],"metadata":{"id":"4CkvbW_SlZ_R"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv('/content/online_retail.csv')\n","df.head()"],"metadata":{"id":"F7SwROzOQnPd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### What did you know about your dataset?"],"metadata":{"id":"H0kj-8xxnORC"}},{"cell_type":"markdown","source":["The dataset consists of e-commerce transactions made between 2022 and 2023. It includes key details like Invoice Number, Product Code, Description, Quantity, Price, Date, Customer ID, and Country. After exploring the dataset, we found that:\n","\n","- The dataset contains several **duplicate rows**, which need to be dropped.\n","- The **CustomerID** column has missing values ‚Äî which is important for customer-based analysis, so rows with missing IDs will be removed in the preprocessing step.\n","- There are also some **invalid entries** like negative or zero quantities and prices, which indicate returns or data entry errors.\n","- The structure and types of the dataset are suitable for further RFM analysis and product recommendation modeling.\n"],"metadata":{"id":"gfoNAAC-nUe_"}},{"cell_type":"markdown","source":["## ***2. Data Preprocessing***\n","\n","---\n","\n","\n","\n","---\n","\n"],"metadata":{"id":"nA9Y7ga8ng1Z"}},{"cell_type":"code","source":["# üßπ Step 2: Data Preprocessing\n","\n","print(\"Before removing missing CustomerID:\", df.shape)\n","df = df.dropna(subset=['CustomerID'])\n","print(\"After removing missing CustomerID:\", df.shape)\n","print(\"Before removing cancelled invoices:\", df.shape)\n","df = df[~df['InvoiceNo'].astype(str).str.startswith('C')]\n","print(\"After removing cancelled invoices:\", df.shape)\n","print(\"Before removing negative/zero Quantity & UnitPrice:\", df.shape)\n","df = df[(df['Quantity'] > 0) & (df['UnitPrice'] > 0)]\n","print(\"After removing negative/zero Quantity & UnitPrice:\", df.shape)\n","df = df.reset_index(drop=True)\n","df['TotalPrice'] = df['Quantity'] * df['UnitPrice']\n","df.head()\n"],"metadata":{"id":"yquE6DsnTyXy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Dataset Columns\n","print(\"Dataset Columns:\")\n","print(df.columns.tolist())\n","# Dataset Describe\n","print(\"Summary Statistics for Numeric Columns:\")\n","df.describe()\n","\n"],"metadata":{"id":"j7xfkqrt5Ag5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Check Unique Values for each variable\n","print(\"Unique value count per column:\")\n","for col in df.columns:\n","    print(f\"{col}: {df[col].nunique()} unique values\")\n"],"metadata":{"id":"qbKyB-ixTEeR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Data wrapping**"],"metadata":{"id":"wmqES3R5VKYV"}},{"cell_type":"code","source":["# ‚úÖ Data Wrangling - Making the Dataset Analysis Ready\n","df = df.dropna(subset=['CustomerID'])\n","df = df[~df['InvoiceNo'].astype(str).str.startswith('C')]\n","df = df[(df['Quantity'] > 0) & (df['UnitPrice'] > 0)]\n","df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])\n","df['TotalPrice'] = df['Quantity'] * df['UnitPrice']\n","df = df.reset_index(drop=True)\n","df.head()\n"],"metadata":{"id":"cmHYUWlkUqCz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### What we did in Preprocessing:\n","\n","1. **Removed rows with missing CustomerID** because customer segmentation relies on customer identity.\n","2. **Removed cancelled transactions** by excluding invoices starting with 'C'. These are usually returns.\n","3. **Filtered out invalid transactions** like those with Quantity or UnitPrice ‚â§ 0.\n","4. **Created 'TotalPrice' column** to represent total spending per row ‚Äî essential for calculating Monetary value.\n","5. Now the dataset contains only valid, non-cancelled purchases from identifiable customers ‚Äî ready for analysis.\n"],"metadata":{"id":"cPSOgYDZUUif"}},{"cell_type":"markdown","source":["## 3. ***Exploratory Data Analysis (EDA)***"],"metadata":{"id":"dauF4eBmngu3"}},{"cell_type":"markdown","source":["**1. Analyze Transaction Volume by Country**"],"metadata":{"id":"7nB0UK-FUyy8"}},{"cell_type":"code","source":["# üó∫Ô∏è Transactions per Country\n","country_txn = df.groupby('Country')['InvoiceNo'].nunique().sort_values(ascending=False)\n","\n","plt.figure(figsize=(12,6))\n","sns.barplot(x=country_txn.head(10).index, y=country_txn.head(10).values, palette='viridis')\n","plt.title(\"Top 10 Countries by Number of Transactions\")\n","plt.ylabel(\"Number of Transactions\")\n","plt.xticks(rotation=45)\n","plt.show()"],"metadata":{"id":"KeNWAJGrUxwR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**2. Identify Top-Selling Products**"],"metadata":{"id":"7ug2xrkXU_tx"}},{"cell_type":"code","source":["# üõçÔ∏è Top 10 Selling Products\n","top_products = df.groupby('Description')['Quantity'].sum().sort_values(ascending=False).head(10)\n","\n","plt.figure(figsize=(12,6))\n","sns.barplot(y=top_products.index, x=top_products.values, palette='magma')\n","plt.title(\"Top 10 Best-Selling Products\")\n","plt.xlabel(\"Total Quantity Sold\")\n","plt.ylabel(\"Product Description\")\n","plt.show()\n"],"metadata":{"id":"wk-9a2fpoLcV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["*** 3. Visualize Purchase Trends Over Time***"],"metadata":{"id":"8Ppf-PtZVDxc"}},{"cell_type":"code","source":["# üìÖ Purchase Trends Over Time (Monthly)\n","df['InvoiceMonth'] = df['InvoiceDate'].dt.to_period('M')\n","monthly_sales = df.groupby('InvoiceMonth')['TotalPrice'].sum()\n","\n","monthly_sales.plot(kind='line', marker='o')\n","plt.title(\"Monthly Revenue Trend\")\n","plt.ylabel(\"Revenue\")\n","plt.xlabel(\"Month\")\n","plt.xticks(rotation=45)\n","plt.show()\n"],"metadata":{"id":"jqKONdwtVG7w"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**4. Inspect Monetary Distribution (Per Transaction & Customer)**"],"metadata":{"id":"jd6QVKLPVUSN"}},{"cell_type":"code","source":["# üí∏ Transaction-Level Distribution\n","plt.figure(figsize=(10,5))\n","sns.histplot(df['TotalPrice'], bins=100, kde=True)\n","plt.title(\"Transaction Amount Distribution\")\n","plt.xlim(0, df['TotalPrice'].quantile(0.95))  # remove extreme outliers\n","plt.show()\n","\n","# üí≥ Customer-Level Distribution\n","customer_spend = df.groupby('CustomerID')['TotalPrice'].sum()\n","plt.figure(figsize=(10,5))\n","sns.histplot(customer_spend, bins=50, kde=True)\n","plt.title(\"Total Spend per Customer\")\n","plt.xlim(0, customer_spend.quantile(0.95))\n","plt.show()\n"],"metadata":{"id":"IDCr5u0DVXTb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[" **5. RFM Distributions**"],"metadata":{"id":"RuJs2O5QVaTX"}},{"cell_type":"code","source":["# üßÆ RFM Calculations\n","snapshot_date = df['InvoiceDate'].max() + pd.Timedelta(days=1)\n","\n","rfm = df.groupby('CustomerID').agg({\n","    'InvoiceDate': lambda x: (snapshot_date - x.max()).days,\n","    'InvoiceNo': 'nunique',\n","    'TotalPrice': 'sum'\n","})\n","\n","rfm.columns = ['Recency', 'Frequency', 'Monetary']\n","\n","# üìä RFM Distributions\n","fig, axes = plt.subplots(1, 3, figsize=(18, 5))\n","\n","sns.histplot(rfm['Recency'], bins=30, ax=axes[0], color='skyblue')\n","axes[0].set_title('Recency Distribution')\n","\n","sns.histplot(rfm['Frequency'], bins=30, ax=axes[1], color='orange')\n","axes[1].set_title('Frequency Distribution')\n","\n","sns.histplot(rfm['Monetary'], bins=30, ax=axes[2], color='green')\n","axes[2].set_title('Monetary Distribution')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"id":"XsZ9EekzYAUS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**6. Elbow Curve for Cluster Selection**\n"],"metadata":{"id":"Yvcbb9GvYN_S"}},{"cell_type":"code","source":["# ‚öñÔ∏è Normalize RFM\n","from sklearn.preprocessing import StandardScaler\n","scaler = StandardScaler()\n","rfm_scaled = scaler.fit_transform(rfm)\n","\n","# üìâ Elbow Method\n","wcss = []\n","for i in range(1,11):\n","    kmeans = KMeans(n_clusters=i, random_state=1)\n","    kmeans.fit(rfm_scaled)\n","    wcss.append(kmeans.inertia_)\n","\n","plt.figure(figsize=(8,5))\n","plt.plot(range(1,11), wcss, marker='o')\n","plt.title(\"Elbow Method For Optimal K\")\n","plt.xlabel(\"Number of Clusters\")\n","plt.ylabel(\"WCSS\")\n","plt.show()\n"],"metadata":{"id":"Nim2BvOiYS07"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[" **7. Customer Cluster Profiles**"],"metadata":{"id":"tU7RXEo5YXvh"}},{"cell_type":"code","source":["# üß† Apply KMeans with chosen cluster (e.g., k=4)\n","kmeans = KMeans(n_clusters=4, random_state=1)\n","rfm['Cluster'] = kmeans.fit_predict(rfm_scaled)\n","\n","# üìä Profile each cluster\n","cluster_profile = rfm.groupby('Cluster').mean().round(1)\n","print(cluster_profile)\n","\n","# üñºÔ∏è Visualize clusters by Recency and Monetary\n","sns.scatterplot(data=rfm, x='Recency', y='Monetary', hue='Cluster', palette='tab10')\n","plt.title(\"Customer Segmentation: Recency vs. Monetary\")\n","plt.show()\n"],"metadata":{"id":"28RhV8wmYXfI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**8. Product Recommendation Heatmap (Cosine Similarity)**"],"metadata":{"id":"K0F8FxsIYuv7"}},{"cell_type":"code","source":["# üßä Pivot Table for Collaborative Filtering\n","pivot = df.pivot_table(index='CustomerID', columns='StockCode', values='Quantity', fill_value=0)\n","\n","# üîÅ Cosine Similarity\n","similarity = cosine_similarity(pivot.T)\n","similarity_df = pd.DataFrame(similarity, index=pivot.columns, columns=pivot.columns)\n","\n","# üî• Heatmap of sample product similarities\n","sample = similarity_df.iloc[:10, :10]  # smaller matrix for readability\n","plt.figure(figsize=(10,8))\n","sns.heatmap(sample, annot=False, cmap=\"YlGnBu\")\n","plt.title(\"Product Similarity Heatmap (Sample)\")\n","plt.show()\n"],"metadata":{"id":"Pn4F6cZDZCMO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**üìä Interactive 3D RFM Cluster Plot using Plotly**"],"metadata":{"id":"029eQ3g9aAN9"}},{"cell_type":"code","source":["# üì¶ Install Plotly (if not already)\n","!pip install plotly --quiet\n","\n","# üìä 3D Cluster Plot\n","import plotly.express as px\n","\n","# Use RFM with cluster labels\n","fig = px.scatter_3d(\n","    rfm,\n","    x='Recency',\n","    y='Frequency',\n","    z='Monetary',\n","    color='Cluster',\n","    title=\"üß† 3D Customer Segmentation based on RFM\",\n","    color_continuous_scale='Viridis',\n","    opacity=0.8\n",")\n","\n","fig.update_traces(marker=dict(size=5))\n","fig.update_layout(scene=dict(\n","    xaxis_title='Recency',\n","    yaxis_title='Frequency',\n","    zaxis_title='Monetary'\n","))\n","fig.show()\n"],"metadata":{"id":"tQmF7BIiZWHd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**üìà Live-Trading Style Chart for E-Commerce Revenue Over Time**"],"metadata":{"id":"LSV7vNrAZ9kK"}},{"cell_type":"code","source":["# üß© Make sure Plotly is installed\n","!pip install plotly --quiet\n","\n","import plotly.graph_objects as go\n","\n","# üï∞Ô∏è Aggregate daily revenue\n","df['Date'] = df['InvoiceDate'].dt.date\n","daily_sales = df.groupby('Date')['TotalPrice'].sum().reset_index()\n","\n","# üìà Create a \"trading-style\" area chart\n","fig = go.Figure()\n","\n","fig.add_trace(go.Scatter(\n","    x=daily_sales['Date'],\n","    y=daily_sales['TotalPrice'],\n","    mode='lines',\n","    name='Revenue',\n","    line=dict(color='limegreen', width=2),\n","    fill='tozeroy',\n","    hovertemplate='Date: %{x}<br>Revenue: ‚Çπ%{y:.2f}<extra></extra>'\n","))\n","\n","# üõ†Ô∏è Layout like a trading dashboard\n","fig.update_layout(\n","    title='üìà Daily Revenue Trend (TradingView Style)',\n","    xaxis_title='Date',\n","    yaxis_title='Revenue (‚Çπ)',\n","    template='plotly_dark',\n","    hovermode='x unified',\n","    xaxis_rangeslider_visible=True,\n","    font=dict(family='Courier New, monospace', size=14, color='white'),\n","    plot_bgcolor='#1e1e1e',\n","    paper_bgcolor='#1e1e1e'\n",")\n","\n","fig.show()\n"],"metadata":{"id":"lPvsdwI5Zw5X"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## ***4. Clustering Methodology (RFM Segmentation)***"],"metadata":{"id":"GF8Ens_Soomf"}},{"cell_type":"markdown","source":[" **1Ô∏è‚É£ Feature Engineering: Create RFM Table**"],"metadata":{"id":"Cs_WfUlZadZI"}},{"cell_type":"code","source":["# üß† RFM Calculation\n","snapshot_date = df['InvoiceDate'].max() + pd.Timedelta(days=1)\n","\n","rfm = df.groupby('CustomerID').agg({\n","    'InvoiceDate': lambda x: (snapshot_date - x.max()).days,  # Recency\n","    'InvoiceNo': 'nunique',  # Frequency\n","    'TotalPrice': 'sum'  # Monetary\n","}).reset_index()\n","\n","rfm.columns = ['CustomerID', 'Recency', 'Frequency', 'Monetary']\n","\n","# Preview RFM table\n","rfm.head()\n"],"metadata":{"id":"0ZLW51XfaZT8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**2Ô∏è‚É£ Standardize / Normalize RFM**"],"metadata":{"id":"eF3HhdG9ayAL"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","# ‚öñÔ∏è Normalize RFM\n","scaler = StandardScaler()\n","rfm_scaled = scaler.fit_transform(rfm[['Recency', 'Frequency', 'Monetary']])\n"],"metadata":{"id":"kwCRZ_ELa15n"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**3Ô∏è‚É£ Choose Clustering Algorithm**"],"metadata":{"id":"pPwGzBDOa4fB"}},{"cell_type":"markdown","source":["We'll start with KMeans for now (easy, effective), but later we try DBSCAN or Hierarchical for better."],"metadata":{"id":"8T2rFZPmbfcu"}},{"cell_type":"markdown","source":["**4Ô∏è‚É£ Elbow Method + Silhouette Score**"],"metadata":{"id":"j-uFCcI0bws3"}},{"cell_type":"code","source":["from sklearn.cluster import KMeans\n","from sklearn.metrics import silhouette_score\n","\n","# üìâ Elbow Method\n","wcss = []\n","sil_scores = []\n","K = range(2, 11)\n","\n","for k in K:\n","    model = KMeans(n_clusters=k, random_state=42)\n","    model.fit(rfm_scaled)\n","    wcss.append(model.inertia_)\n","    sil_scores.append(silhouette_score(rfm_scaled, model.labels_))\n","\n","# Plot WCSS (Elbow)\n","plt.figure(figsize=(10,4))\n","plt.plot(K, wcss, 'bo-')\n","plt.xlabel(\"Number of Clusters (K)\")\n","plt.ylabel(\"WCSS\")\n","plt.title(\"Elbow Method\")\n","plt.grid(True)\n","plt.show()\n","\n","# Plot Silhouette Score\n","plt.figure(figsize=(10,4))\n","plt.plot(K, sil_scores, 'go-')\n","plt.xlabel(\"Number of Clusters (K)\")\n","plt.ylabel(\"Silhouette Score\")\n","plt.title(\"Silhouette Score Method\")\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"id":"EXU03JRbb0FC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Based on both Elbow Method and Silhouette Score:\n","\n","‚úÖ The optimal number of clusters is **K = 4**.\n","\n","- Elbow Method shows a noticeable bend at K=4.\n","- Silhouette Score is highest at K=4 (~0.62), indicating that the clusters are well-formed and distinct.\n","\n","Therefore, we proceed with **KMeans clustering using K = 4** for customer segmentation.\n"],"metadata":{"id":"9P_iLI9IcdRv"}},{"cell_type":"markdown","source":["**5Ô∏è‚É£ Run KMeans Clustering with Optimal K (e.g., K=4)**"],"metadata":{"id":"jhFKQJQSdAC_"}},{"cell_type":"code","source":["# üîÅ Run KMeans Clustering\n","optimal_k = 4  # Choose based on elbow + silhouette\n","kmeans = KMeans(n_clusters=optimal_k, random_state=42)\n","rfm['Cluster'] = kmeans.fit_predict(rfm_scaled)\n"],"metadata":{"id":"6qAgKCCFcdIG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Label the Clusters (Interpret Based on RFM Averages)**"],"metadata":{"id":"UgFdDTD7dMCL"}},{"cell_type":"code","source":["# üß† Analyze Cluster Characteristics\n","numeric_cols = ['Recency', 'Frequency', 'Monetary']\n","cluster_summary = rfm.groupby('Cluster')[numeric_cols].mean().round(1)\n","cluster_summary\n","\n","rfm['Segment'] = rfm['Cluster'].map({\n","    0: 'Regular',\n","    1: 'High-Value',\n","    2: 'At-Risk',\n","    3: 'Occasional'\n","})\n","\n","\n"],"metadata":{"id":"7cTYMx-pdJfg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**6Ô∏è‚É£ Visualize the Clusters (2D + 3D)**"],"metadata":{"id":"cj4NZcMsdzQB"}},{"cell_type":"markdown","source":["**‚úÖ 2D Scatter**"],"metadata":{"id":"hV1t20J5d5Rb"}},{"cell_type":"code","source":["sns.scatterplot(data=rfm, x='Recency', y='Monetary', hue='Segment', palette='Set2')\n","plt.title(\"Customer Segments: Recency vs. Monetary\")\n","plt.show()\n"],"metadata":{"id":"tEhE_llud0vD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**‚úÖ 3D Scatter**"],"metadata":{"id":"2nNC5y8Yd91H"}},{"cell_type":"code","source":["import plotly.express as px\n","\n","fig = px.scatter_3d(\n","    rfm, x='Recency', y='Frequency', z='Monetary',\n","    color='Segment',\n","    title='üìä 3D Customer Segmentation (RFM Clustering)',\n","    opacity=0.7\n",")\n","fig.show()\n"],"metadata":{"id":"o2RUsvczeFhR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Option 1: DBSCAN (Density-Based Clustering)**"],"metadata":{"id":"hm4fUJ8ve4b5"}},{"cell_type":"code","source":["from sklearn.cluster import DBSCAN\n","from sklearn.preprocessing import StandardScaler\n","\n","# ‚öñÔ∏è Standardize again if needed\n","rfm_scaled = scaler.fit_transform(rfm[['Recency', 'Frequency', 'Monetary']])\n","\n","# üìç Run DBSCAN\n","dbscan = DBSCAN(eps=1.5, min_samples=5)\n","rfm['DBSCAN_Cluster'] = dbscan.fit_predict(rfm_scaled)\n","\n","# üîç Check number of clusters (including noise: -1)\n","print(\"DBSCAN cluster labels:\", rfm['DBSCAN_Cluster'].unique())\n","\n","# üìä Visualize\n","sns.scatterplot(data=rfm, x='Recency', y='Monetary', hue='DBSCAN_Cluster', palette='tab10')\n","plt.title(\"DBSCAN Clusters\")\n","plt.show()\n"],"metadata":{"id":"YnONW0Dke3sO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[" **Option 2: Hierarchical Clustering (Agglomerative)**"],"metadata":{"id":"qJ3yGd3ieuOw"}},{"cell_type":"code","source":["from sklearn.cluster import AgglomerativeClustering\n","from scipy.cluster.hierarchy import dendrogram, linkage\n","\n","# üîó Dendrogram to choose number of clusters\n","linked = linkage(rfm_scaled, method='ward')\n","\n","plt.figure(figsize=(12, 6))\n","dendrogram(linked, truncate_mode='lastp', p=20)\n","plt.title(\"Hierarchical Clustering Dendrogram\")\n","plt.xlabel(\"Customers\")\n","plt.ylabel(\"Distance\")\n","plt.show()\n","\n","# üìå Fit Agglomerative Clustering (choose n_clusters from dendrogram)\n","agg = AgglomerativeClustering(n_clusters=4)\n","rfm['HClust_Cluster'] = agg.fit_predict(rfm_scaled)\n","\n","# üìä Visualize\n","sns.scatterplot(data=rfm, x='Frequency', y='Monetary', hue='HClust_Cluster', palette='Set1')\n","plt.title(\"Hierarchical Clustering: Frequency vs. Monetary\")\n","plt.show()\n","\n"],"metadata":{"id":"qP8VF0KFetpQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"MUs-kcYIey_u"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[" **7Ô∏è‚É£ Save the Model for Streamlit**"],"metadata":{"id":"asQKqZb1eT9B"}},{"cell_type":"code","source":["# üíæ Save the Clustering Model and Scaler\n","import joblib\n","\n","joblib.dump(kmeans, 'rfm_kmeans_model.pkl')\n","joblib.dump(scaler, 'rfm_scaler.pkl')\n","\n","# Save RFM data for analysis\n","rfm.to_csv(\"rfm_clustered.csv\", index=False)\n"],"metadata":{"id":"_ozF03k-eXnn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## ***5. Product Recommendation System (Item-Based)***"],"metadata":{"id":"g-ATYxFrGrvw"}},{"cell_type":"markdown","source":["### Recommendation System Approach:\n","\n","We built an Item-Based Collaborative Filtering model using Cosine Similarity.\n","\n","Steps followed:\n","1. Created a Customer √ó Product matrix from the transaction data.\n","2. Calculated cosine similarity between products based on purchase patterns.\n","3. Built a function to return top 5 similar products for a given product.\n"],"metadata":{"id":"10w7S-6ufXEV"}},{"cell_type":"markdown","source":["**1. Create the Customer-Product Matrix**"],"metadata":{"id":"sqC2hKWFfY8I"}},{"cell_type":"code","source":["pivot_table = df.pivot_table(index='CustomerID', columns='StockCode', values='Quantity', aggfunc='sum', fill_value=0)\n","pivot_table.head()\n"],"metadata":{"id":"AAOZMyNFfdHU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**2. Compute Cosine Similarity Between Products**"],"metadata":{"id":"vHK6_Hk-fiD-"}},{"cell_type":"code","source":["from sklearn.metrics.pairwise import cosine_similarity\n","import pandas as pd\n","\n","# Compute cosine similarity (between product vectors)\n","product_similarity = cosine_similarity(pivot_table.T)  # Transpose: Products as rows\n","\n","# Convert to DataFrame\n","product_similarity_df = pd.DataFrame(product_similarity, index=pivot_table.columns, columns=pivot_table.columns)\n","\n","# Preview the similarity matrix\n","product_similarity_df.head()\n"],"metadata":{"id":"rxrjY88-flb4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**3. Build Recommendation Function**"],"metadata":{"id":"K8He-NS3fqwg"}},{"cell_type":"code","source":["# Function to get top 5 similar products\n","def get_similar_products(product_id, top_n=5):\n","    if product_id not in product_similarity_df.columns:\n","        return f\"Product ID '{product_id}' not found in data.\"\n","\n","    # Sort similarity values (ignore the product itself)\n","    similar = product_similarity_df[product_id].sort_values(ascending=False)\n","    top_similar = similar.iloc[1:top_n+1]\n","\n","    return top_similar\n","\n","# Example usage\n","get_similar_products('84029E')  # Replace with any StockCode in your dataset\n"],"metadata":{"id":"MzqvBb7aft-N"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Optional: Get Product Names from StockCodes**"],"metadata":{"id":"DUXf9pXmfwSa"}},{"cell_type":"code","source":["# Create a lookup dictionary of StockCode to Description\n","product_lookup = df[['StockCode', 'Description']].drop_duplicates().set_index('StockCode')['Description'].to_dict()\n","\n","# Print recommended products with descriptions\n","def get_similar_product_names(product_id, top_n=5):\n","    similar = get_similar_products(product_id, top_n)\n","    if isinstance(similar, str):\n","        return similar\n","    return [(code, product_lookup.get(code, \"Unknown\")) for code in similar.index]\n","\n","# Example usage\n","get_similar_product_names('84029E')\n"],"metadata":{"id":"W8JWNGkIf0I_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","files.download('rfm_kmeans_model.pkl')\n","files.download('rfm_scaler.pkl')\n","files.download('rfm_clustered.csv')\n","\n","\n","# Save lookup dictionary\n","product_lookup_df = df[['StockCode', 'Description']].drop_duplicates().set_index('StockCode')\n","product_lookup_df.to_csv('product_lookup.csv')\n","files.download('product_lookup.csv')\n"],"metadata":{"id":"G3Wd4VR9hqMA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# If not already saved\n","rfm.to_csv(\"rfm_segmented.csv\", index=False)\n","\n","# Download it\n","from google.colab import files\n","files.download(\"rfm_segmented.csv\")\n"],"metadata":{"id":"UzpdDIqCjial"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Recreate the pivot table if not done already\n","pivot_table = df.pivot_table(index='CustomerID', columns='StockCode', values='Quantity', aggfunc='sum', fill_value=0)\n","\n","# Save it as CSV\n","pivot_table.to_csv(\"pivot_table.csv\")\n","\n","# Download it\n","from google.colab import files\n","files.download(\"pivot_table.csv\")\n"],"metadata":{"id":"S-uDbavZj1Ix"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Recompute product similarity if needed\n","from sklearn.metrics.pairwise import cosine_similarity\n","\n","# Pivot table (CustomerID √ó StockCode matrix)\n","pivot_table = df.pivot_table(index='CustomerID', columns='StockCode', values='Quantity', fill_value=0)\n","\n","# Cosine similarity between products\n","product_similarity = cosine_similarity(pivot_table.T)\n","product_similarity_df = pd.DataFrame(product_similarity, index=pivot_table.columns, columns=pivot_table.columns)\n","\n","# Save to CSV\n","product_similarity_df.to_csv(\"product_similarity_matrix.csv\")\n","\n","# Download\n","from google.colab import files\n","files.download(\"product_similarity_matrix.csv\")\n"],"metadata":{"id":"Jt03Yw8OkPRC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# See some sample product codes\n","df['StockCode'].unique()[:10]\n"],"metadata":{"id":"QqIiak54leMF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["\n","## ***6. Conclusion***\n"],"metadata":{"id":"-FyyNfD_pnEF"}},{"cell_type":"markdown","source":["In this project, we successfully built an intelligent retail dashboard‚ÄîShopper Spectrum Dashboard‚Äîthat integrates both customer segmentation and product recommendation into a unified system. Starting with extensive data preprocessing and cleaning of online retail transactions, we conducted robust Exploratory Data Analysis (EDA) to uncover valuable patterns such as purchase frequency, top-selling products, and revenue-generating customers across countries. Using the RFM (Recency, Frequency, Monetary) model, we engineered meaningful features that reflect customer behavior. We then applied KMeans clustering to segment customers into actionable groups like High-Value, Regular, Occasional, and At-Risk, using both Elbow method and Silhouette scores to validate our clusters. Simultaneously, we implemented an Item-based Collaborative Filtering Recommendation System using Cosine Similarity, enabling the system to suggest top 5 similar products based on purchase history. The final solution was deployed through an interactive Streamlit web app, where users can input a StockCode to get personalized product recommendations or provide customer RFM values to predict their segment. This project not only enhances customer understanding but also drives strategic business decisions like targeted marketing, reactivation campaigns, and upselling opportunities. Overall, it showcases the powerful synergy of data science and real-time user experience in solving real-world e-commerce problems."],"metadata":{"id":"WIa3w3bDOGub"}}]}